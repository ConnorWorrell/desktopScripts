#!/bin/bash

lock="lock"

while test $# -gt 0; do
	case "$1" in
		-h|--help) 
			help="1"
			shift;;
		-c|--check)
			check="check"
			lock=""
			shift;;
		-b|--buildcache) 
			build="build"
			check="check"
			prune="prune"
			lock=""
			shift
			case "$1" in
				''|*[!0-9*)
					startfile=1;;
				*)
					startfile=$1
					shift;;
			esac
			;;
		-r|--rebuildcache) 
			build="rebuild"
			lock=""
			shift
			case "$1" in
				''|*[!0-9*)
					echo "rebuilding all"
					startfile=1;;
				*)
					echo "rebuilding from $1"
					startfile=$1
					shift;;
			esac
			;;
		-f|--file)
			shift
			lockfile=$1
			shift;;
		-p|--prune)
			shift
			lock=""
			prune="prune"
			;;
		*) 
			echo "unknown flag use --help for more info"
			exit 1;;
	esac
done

if [ "$help" == "1" ]
then
	echo "Locks screen, choosing a random background from ~/Wallpapers"
	echo " "
	echo "-b,  --buildcache    Build the cache, skipping windows that are already cached"
	echo "-r,  --rebuildcache  Build the entire cache of correctly sized windows"
	echo "-c,  --check         Checks cache for corruption"
	echo "-f,  --file          Specifiy file to use for lock screen"
	echo "-p,  --prune         Remove files from cache that are not in Wallpapers folder"
	echo "                     If followed by a number, rebuild starts at that number"
	exit 0
fi 

[ -d ~/.Wallpapers_cache ] || mkdir ~/.Wallpapers_cache
[ -d ~/.Wallpapers_cache/LockScreens ] || mkdir ~/.Wallpapers_cache/LockScreens

resolution=$(xrandr | fgrep "*" | awk '{print $1}')

build_lock () {
		convert $1 -colorspace RGB -resize $resolution^ -gravity center -crop $resolution+0+0 PNG:- | convert - $2
}

if [ "$prune" == "prune" ]
then
	fileCount=$(ls ~/.Wallpapers_cache/LockScreens | wc -l)
	currentfile=1
	for file in ~/.Wallpapers_cache/LockScreens/*
	do
		echo "[$currentfile/$fileCount] Pruning"
		currentfile=$(expr $currentfile + 1)

		if [ "$(ls ~/Wallpapers | grep $(basename ${file//.png/}))" == "" ]
		then
			echo "Pruning $file"
			rm $file
		fi
	done	
fi

if [ "$check" == "check" ]
then
	fileCount=$(ls ~/.Wallpapers_cache/LockScreens | wc -l)
	currentfile=1

	# using a for loop instead of the pngcheck's built in multi file check to reduce total ram usage
	for file in ~/.Wallpapers_cache/LockScreens/*
	do
		echo "[$currentfile/$fileCount] Checking for corruption"
		currentfile=$(expr $currentfile + 1)

		if [ "$(pngcheck $file | grep -i "error")" != "" ]
		then
			echo "error found: $file"
			errorFileName=$(basename $file)
			CheckFileName=${errorFileName//.png/}
			BuildFileName=$(ls ~/Wallpapers | grep $CheckFileName)
			echo "BuildFileName $BuildFileName"
			if [ "$BuildFileName" != "" ]
			then 
				echo "origional file found, replacing"
				build_lock ~/Wallpapers/$BuildFileName $file
			else
				echo "original file not found, deleting"
				rm $file
			fi
		fi
	done
	
	if [ "$build" != "build" ]
	then
		exit 0
	fi
fi

if [ "$build" == "build" ] || [ "$build" == "rebuild" ]
then
	
	fileCount=$(ls ~/Wallpapers | wc -l)
	currentfile=1

	echo "building cache"
	for file in ~/Wallpapers/*
	do 
		if [ $startfile -gt $currentfile ]; then
			currentfile=$(expr $currentfile + 1)
			continue
		fi		

		FileName=$(basename ${file//.jpg/.png})
		CacheFile=~/.Wallpapers_cache/LockScreens/$FileName

		if $(test -f "$CacheFile") && [ "$build" == "build" ]
		then
			echo [$currentfile/$fileCount] $(basename $file) found in cache
			currentfile=$(expr $currentfile + 1)
			continue
		fi

		echo [$currentfile/$fileCount] converting image $file to resolution: $resolution
		
		build_lock $file ~/.Wallpapers_cache/LockScreens/$FileName

		currentfile=$(expr $currentfile + 1)
	done
fi

if [ "$lock" == "lock" ]
then
	if [ "$(ps aux | grep -i X11 | wc | awk '{print $1}')" -lt 2 ]
	then
		echo "No X11 instance found, running vlock"
		vlock
		exit 0
	fi


	if [ "$lockfile" == "" ]
	then
		file=$(ls ~/Wallpapers | shuf -n 1)
		fullpath=~/.Wallpapers_cache/LockScreens/${file//.jpg/.png}
	else
		file=$(basename $lockfile)
		fullpath=~/.Wallpapers_cache/LockScreens/${file//.jpg/.png}
	fi		

	if test -f "$fullpath"; then
		echo "image found in cache $fullpath"
		if [ "$(pngcheck $fullpath | grep -i "error")" != "" ]
		then	
			echo "image corrupt, rebuilding"
		# convert ~/Wallpapers/$file -colorspace RGB -gravity center -resize $resolution^ -gravity center -crop $resolution+0+0 +repage PNG:- | convert - $fullpath
			build_lock ~/Wallpapers/$file $fullpath
		fi		
	else
		echo "image not in cache converting"
		build_lock ~/Wallpapers/$file $fullpath
		#build_lock $lockfile $fullpath
		# convert $lockfile -colorspace RGB -resize $resolution^ -gravity center -crop $resolution+0+0 PNG:- | convert - $fullpath
	fi	

	echo "locking"

	dunstctl set-paused true
	i3lock --image $fullpath -n || vlock
	dunstctl set-paused false

fi
